# Base class: Phone
class Phone:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def make_call(self, number):
        print(f"📞 Calling {number} from {self.brand} {self.model}...")

    def get_info(self):
        return f"Brand: {self.brand}, Model: {self.model}"


# Child class: SamsungPhone
class SamsungPhone(Phone):
    def __init__(self, model, battery_life, storage):
        super().__init__("Samsung", model)
        self.__battery_life = battery_life   # Encapsulated attribute
        self.__storage = storage             # Encapsulated attribute

    # Additional method
    def take_picture(self):
        print(f"📸 {self.model} takes a high-quality photo!")

    # Samsung-specific method
    def use_bixby(self):
        print(f"🗣️ {self.model} says: 'Hi, I’m Bixby. How can I help you today?'")

    # Accessor method for encapsulated attributes
    def get_specs(self):
        return f"{self.get_info()}, Battery: {self.__battery_life}mAh, Storage: {self.__storage}GB"

    # Polymorphism: Overriding make_call()
    def make_call(self, number):
        print(f"📱 Samsung {self.model} uses advanced calling features to call {number}.")


# Testing the class
def main():
    # Create a Samsung phone object
    phone1 = SamsungPhone("Galaxy S23 Ultra", battery_life=5000, storage=256)

    # Use methods
    print(phone1.get_specs())
    phone1.take_picture()
    phone1.use_bixby()
    phone1.make_call("123-456-7890")

if __name__ == "__main__":
    main()
